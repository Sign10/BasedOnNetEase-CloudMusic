{"ast":null,"code":"import { createStore } from 'vuex';\nimport { getMusicLyric } from '@/requests/api/item';\nexport default createStore({\n  state: {\n    //底部组件中默认的歌单数据\n    playList: [{\n      al: {\n        id: 19243,\n        name: \"吻别\",\n        pic: 109951166032666620,\n        picUrl: \"https://p2.music.126.net/8cxEF5lBfKLWbAqrF0yVmg==/109951166032666632.jpg\",\n        pic_str: \"109951166032666632\"\n      },\n      id: 190449,\n      name: '吻别',\n      ar: [{\n        name: '张学友'\n      }]\n    }],\n    playListIndex: 0,\n    //默认的歌曲下标为0\n    isbtnShow: true,\n    //按钮显示为真，默认显示暂停按钮\n    songlistmore: false,\n    //默认不显示歌曲详情页\n    lyricList: {},\n    currentTime: 0,\n    //歌词滚动中的目前的事件\n    duration: 0,\n    //一首歌的完整时间\n    isLogin: false,\n    //判断是否已经登录\n    isFooterMusic: true //底部音乐组件是否显示\n  },\n\n  mutations: {\n    //改变播放按钮的状态\n    updateIsbtnShow(state, value) {\n      state.isbtnShow = value;\n    },\n    //在搜索页面，点击歌曲，push到歌单的最后一项\n    pushPlayList(state, value) {\n      state.playList.push(value);\n    },\n    //更新state的playList，也就是歌单\n    updatePlayList(state, value) {\n      state.playList = value;\n    },\n    //更新state的playListIndex，就是歌曲的序列\n    updatePlayListIndex(state, value) {\n      state.playListIndex = value;\n    },\n    updatesonglistmore(state) {\n      state.songlistmore = !state.songlistmore;\n    },\n    updateLyricList(state, value) {\n      state.lyricList = value;\n    },\n    updateCurrentTime(state, value) {\n      state.currentTime = value;\n    },\n    updateDuration(state, value) {\n      state.duration = value;\n    }\n  },\n  actions: {\n    async getLyric(context, value) {\n      //通过封装的axios函数，异步获取歌词\n      let res = await getMusicLyric(value);\n      context.commit('updateLyricList', res.data.lrc);\n    }\n  }\n});","map":{"version":3,"names":["createStore","getMusicLyric","state","playList","al","id","name","pic","picUrl","pic_str","ar","playListIndex","isbtnShow","songlistmore","lyricList","currentTime","duration","isLogin","isFooterMusic","mutations","updateIsbtnShow","value","pushPlayList","push","updatePlayList","updatePlayListIndex","updatesonglistmore","updateLyricList","updateCurrentTime","updateDuration","actions","getLyric","context","res","commit","data","lrc"],"sources":["D:/桌面/vue项目/wangyiyunapp/src/store/index.js"],"sourcesContent":["import { createStore } from 'vuex'\nimport { getMusicLyric } from '@/requests/api/item'\nexport default createStore({\n  state: {\n    //底部组件中默认的歌单数据\n    playList: [{\n      al: {\n        id: 19243,\n        name: \"吻别\",\n        pic: 109951166032666620,\n        picUrl: \"https://p2.music.126.net/8cxEF5lBfKLWbAqrF0yVmg==/109951166032666632.jpg\",\n        pic_str: \"109951166032666632\",\n      },\n      id: 190449,\n      name: '吻别',\n      ar: [{ name: '张学友' }]\n    }],\n    playListIndex: 0, //默认的歌曲下标为0\n    isbtnShow: true,  //按钮显示为真，默认显示暂停按钮\n    songlistmore: false,  //默认不显示歌曲详情页\n    lyricList: {},  \n    currentTime: 0,   //歌词滚动中的目前的事件\n    duration: 0,    //一首歌的完整时间\n    isLogin: false, //判断是否已经登录\n    isFooterMusic: true //底部音乐组件是否显示\n  },\n  mutations: {\n    //改变播放按钮的状态\n    updateIsbtnShow(state, value) {\n      state.isbtnShow = value\n    },\n    //在搜索页面，点击歌曲，push到歌单的最后一项\n    pushPlayList(state, value) {\n      state.playList.push(value)\n    },\n    //更新state的playList，也就是歌单\n    updatePlayList(state, value) {\n      state.playList = value\n    },\n    //更新state的playListIndex，就是歌曲的序列\n    updatePlayListIndex(state, value) {\n      state.playListIndex = value\n    },\n    updatesonglistmore(state) {\n      state.songlistmore = !state.songlistmore\n    },\n    updateLyricList(state, value) {\n      state.lyricList = value\n    },\n    updateCurrentTime(state, value) {\n      state.currentTime = value;\n    },\n    updateDuration(state, value) {\n      state.duration = value\n    }\n  },\n  actions: {\n    async getLyric(context, value) {\n      //通过封装的axios函数，异步获取歌词\n      let res = await getMusicLyric(value)\n      context.commit('updateLyricList', res.data.lrc);\n    }\n  }\n\n})\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,MAAM;AAClC,SAASC,aAAa,QAAQ,qBAAqB;AACnD,eAAeD,WAAW,CAAC;EACzBE,KAAK,EAAE;IACL;IACAC,QAAQ,EAAE,CAAC;MACTC,EAAE,EAAE;QACFC,EAAE,EAAE,KAAK;QACTC,IAAI,EAAE,IAAI;QACVC,GAAG,EAAE,kBAAkB;QACvBC,MAAM,EAAE,0EAA0E;QAClFC,OAAO,EAAE;MACX,CAAC;MACDJ,EAAE,EAAE,MAAM;MACVC,IAAI,EAAE,IAAI;MACVI,EAAE,EAAE,CAAC;QAAEJ,IAAI,EAAE;MAAM,CAAC;IACtB,CAAC,CAAC;IACFK,aAAa,EAAE,CAAC;IAAE;IAClBC,SAAS,EAAE,IAAI;IAAG;IAClBC,YAAY,EAAE,KAAK;IAAG;IACtBC,SAAS,EAAE,CAAC,CAAC;IACbC,WAAW,EAAE,CAAC;IAAI;IAClBC,QAAQ,EAAE,CAAC;IAAK;IAChBC,OAAO,EAAE,KAAK;IAAE;IAChBC,aAAa,EAAE,IAAI,CAAC;EACtB,CAAC;;EACDC,SAAS,EAAE;IACT;IACAC,eAAeA,CAAClB,KAAK,EAAEmB,KAAK,EAAE;MAC5BnB,KAAK,CAACU,SAAS,GAAGS,KAAK;IACzB,CAAC;IACD;IACAC,YAAYA,CAACpB,KAAK,EAAEmB,KAAK,EAAE;MACzBnB,KAAK,CAACC,QAAQ,CAACoB,IAAI,CAACF,KAAK,CAAC;IAC5B,CAAC;IACD;IACAG,cAAcA,CAACtB,KAAK,EAAEmB,KAAK,EAAE;MAC3BnB,KAAK,CAACC,QAAQ,GAAGkB,KAAK;IACxB,CAAC;IACD;IACAI,mBAAmBA,CAACvB,KAAK,EAAEmB,KAAK,EAAE;MAChCnB,KAAK,CAACS,aAAa,GAAGU,KAAK;IAC7B,CAAC;IACDK,kBAAkBA,CAACxB,KAAK,EAAE;MACxBA,KAAK,CAACW,YAAY,GAAG,CAACX,KAAK,CAACW,YAAY;IAC1C,CAAC;IACDc,eAAeA,CAACzB,KAAK,EAAEmB,KAAK,EAAE;MAC5BnB,KAAK,CAACY,SAAS,GAAGO,KAAK;IACzB,CAAC;IACDO,iBAAiBA,CAAC1B,KAAK,EAAEmB,KAAK,EAAE;MAC9BnB,KAAK,CAACa,WAAW,GAAGM,KAAK;IAC3B,CAAC;IACDQ,cAAcA,CAAC3B,KAAK,EAAEmB,KAAK,EAAE;MAC3BnB,KAAK,CAACc,QAAQ,GAAGK,KAAK;IACxB;EACF,CAAC;EACDS,OAAO,EAAE;IACP,MAAMC,QAAQA,CAACC,OAAO,EAAEX,KAAK,EAAE;MAC7B;MACA,IAAIY,GAAG,GAAG,MAAMhC,aAAa,CAACoB,KAAK,CAAC;MACpCW,OAAO,CAACE,MAAM,CAAC,iBAAiB,EAAED,GAAG,CAACE,IAAI,CAACC,GAAG,CAAC;IACjD;EACF;AAEF,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}