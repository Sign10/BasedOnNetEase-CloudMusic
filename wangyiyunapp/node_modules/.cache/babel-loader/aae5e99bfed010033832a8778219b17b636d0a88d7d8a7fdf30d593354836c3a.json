{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, openBlock as _openBlock, createElementBlock as _createElementBlock, resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-516dcd84\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"FooterMusic\"\n};\nconst _hoisted_2 = [\"src\"];\nconst _hoisted_3 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"span\", null, \"横滑切换上下首噢\", -1 /* HOISTED */));\nconst _hoisted_4 = {\n  class: \"footerRight\"\n};\nconst _hoisted_5 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"use\", {\n  \"xlink:href\": \"#icon-bofanganniu\"\n}, null, -1 /* HOISTED */));\nconst _hoisted_6 = [_hoisted_5];\nconst _hoisted_7 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"use\", {\n  \"xlink:href\": \"#icon-weibiaoti--\"\n}, null, -1 /* HOISTED */));\nconst _hoisted_8 = [_hoisted_7];\nconst _hoisted_9 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"svg\", {\n  class: \"icon3\",\n  \"aria-hidden\": \"true\"\n}, [/*#__PURE__*/_createElementVNode(\"use\", {\n  \"xlink:href\": \"#icon-zu\"\n})], -1 /* HOISTED */));\nconst _hoisted_10 = [\"src\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_MusicDetail = _resolveComponent(\"MusicDetail\");\n  const _component_van_popup = _resolveComponent(\"van-popup\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createCommentVNode(\" 底部音乐组件的左侧，点击会调用updatesonglistmore函数，显示歌曲详细页 \"), _createElementVNode(\"div\", {\n    class: \"footerLeft\",\n    onClick: _cache[0] || (_cache[0] = (...args) => _ctx.updatesonglistmore && _ctx.updatesonglistmore(...args))\n  }, [_createCommentVNode(\" 歌曲图片 \"), _createElementVNode(\"img\", {\n    src: _ctx.playList[_ctx.playListIndex].al.picUrl,\n    alt: \"\"\n  }, null, 8 /* PROPS */, _hoisted_2), _createCommentVNode(\" 歌曲名字 \"), _createElementVNode(\"div\", null, [_createElementVNode(\"p\", null, _toDisplayString(_ctx.playList[_ctx.playListIndex].name), 1 /* TEXT */), _hoisted_3])]), _createCommentVNode(\" 底部组件的右部分 \"), _createElementVNode(\"div\", _hoisted_4, [_createCommentVNode(\" 点击调用play函数，播放音乐，同时使用v-if来判断显示播放还是暂停按钮，isbtnShow在Vuex \"), _ctx.isbtnShow ? (_openBlock(), _createElementBlock(\"svg\", {\n    key: 0,\n    class: \"icon3\",\n    \"aria-hidden\": \"true\",\n    onClick: _cache[1] || (_cache[1] = (...args) => $options.play && $options.play(...args))\n  }, _hoisted_6)) : (_openBlock(), _createElementBlock(\"svg\", {\n    key: 1,\n    class: \"icon3\",\n    \"aria-hidden\": \"true\",\n    onClick: _cache[2] || (_cache[2] = (...args) => $options.play && $options.play(...args))\n  }, _hoisted_8)), _hoisted_9]), _createCommentVNode(\" 使用audio，src接受传入的歌曲数据 \"), _createElementVNode(\"audio\", {\n    ref: \"audio\",\n    src: `https://music.163.com/song/media/outer/url?id=${_ctx.playList[_ctx.playListIndex].id}.mp3`\n  }, null, 8 /* PROPS */, _hoisted_10), _createCommentVNode(\" 使用vant组件库中的详情页 \"), _createVNode(_component_van_popup, {\n    show: _ctx.songlistmore,\n    \"onUpdate:show\": _cache[3] || (_cache[3] = $event => _ctx.songlistmore = $event),\n    position: \"right\",\n    style: {\n      width: '100%',\n      height: '100%'\n    }\n  }, {\n    default: _withCtx(() => [_createCommentVNode(\" 在详情页中使用MusicDetail组件，并且向里面传入我当前的歌曲的信息，调用play函数，并且与vuex的按钮显示进行绑定 \"), _createVNode(_component_MusicDetail, {\n      musiclist: _ctx.playList[_ctx.playListIndex],\n      isbtnShow: _ctx.isbtnShow,\n      play: $options.play,\n      addDuration: $options.addDuration\n    }, null, 8 /* PROPS */, [\"musiclist\", \"isbtnShow\", \"play\", \"addDuration\"])]),\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"show\"])]);\n}","map":{"version":3,"names":["class","_createElementVNode","_hoisted_5","_hoisted_7","_createElementBlock","_hoisted_1","_createCommentVNode","onClick","_cache","args","_ctx","updatesonglistmore","src","playList","playListIndex","al","picUrl","alt","_toDisplayString","name","_hoisted_3","_hoisted_4","isbtnShow","$options","play","_hoisted_9","ref","id","_createVNode","_component_van_popup","show","songlistmore","$event","position","style","width","height","_component_MusicDetail","musiclist","addDuration"],"sources":["D:\\桌面\\vue项目\\wangyiyunapp\\src\\components\\item\\FooterMusic.vue"],"sourcesContent":["<template>\r\n    <div class=\"FooterMusic\">\r\n        <!-- 底部音乐组件的左侧，点击会调用updatesonglistmore函数，显示歌曲详细页 -->\r\n        <div class=\"footerLeft\" @click=\"updatesonglistmore\">\r\n            <!-- 歌曲图片 -->\r\n            <img :src=\"playList[playListIndex].al.picUrl\" alt=\"\">\r\n            <!-- 歌曲名字 -->\r\n            <div>\r\n                <p>{{ playList[playListIndex].name }}</p>\r\n                <span>横滑切换上下首噢</span>\r\n            </div>\r\n        </div>\r\n        <!-- 底部组件的右部分 -->\r\n        <div class=\"footerRight\">\r\n            <!-- 点击调用play函数，播放音乐，同时使用v-if来判断显示播放还是暂停按钮，isbtnShow在Vuex -->\r\n            <svg class=\"icon3\" aria-hidden=\"true\" @click=\"play\" v-if=\"isbtnShow\">\r\n                <use xlink:href=\"#icon-bofanganniu\"></use>\r\n            </svg>\r\n            <svg class=\"icon3\" aria-hidden=\"true\" @click=\"play\" v-else>\r\n                <use xlink:href=\"#icon-weibiaoti--\"></use>\r\n            </svg>\r\n            <svg class=\"icon3\" aria-hidden=\"true\">\r\n                <use xlink:href=\"#icon-zu\"></use>\r\n            </svg>\r\n        </div>\r\n        <!-- 使用audio，src接受传入的歌曲数据 -->\r\n        <audio ref=\"audio\" :src=\"`https://music.163.com/song/media/outer/url?id=${playList[playListIndex].id}.mp3`\"></audio>\r\n        <!-- 使用vant组件库中的详情页 -->\r\n        <van-popup v-model:show=\"songlistmore\" position=\"right\" :style=\"{ width: '100%', height: '100%' }\">\r\n            <!-- 在详情页中使用MusicDetail组件，并且向里面传入我当前的歌曲的信息，调用play函数，并且与vuex的按钮显示进行绑定 -->\r\n            <MusicDetail :musiclist=\"playList[playListIndex]\" :isbtnShow=\"isbtnShow\" :play=\"play\"\r\n                :addDuration=\"addDuration\" />\r\n        </van-popup>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport { mapMutations, mapState } from 'vuex';\r\n// 导入歌曲详情页组件\r\nimport MusicDetail from '@/components/item/MusicDetail.vue'\r\n\r\nexport default {\r\n    data() {\r\n        return {\r\n            setInter: 0\r\n        }\r\n    },\r\n    mounted() {\r\n        //底部组件刚渲染成功后，就向vuex传递这首歌的数据\r\n        this.$store.dispatch('getLyric', this.playList[this.playListIndex].id)\r\n    },\r\n    computed: {\r\n        //获取vuex里面的数据\r\n        ...mapState(['playList', 'playListIndex', 'isbtnShow', 'songlistmore'])\r\n    },\r\n    updated() {\r\n        //当有歌曲切换的时候，也向vuex传入数据\r\n        this.$store.dispatch('getLyric', this.playList[this.playListIndex].id),\r\n            this.addDuration()\r\n    },\r\n    methods: {\r\n        play() {\r\n            if (this.$refs.audio.paused) {\r\n                this.$refs.audio.play()\r\n                this.updateIsbtnShow(false)\r\n                this.updateTime()\r\n            }\r\n            else {\r\n                this.$refs.audio.pause()\r\n                this.updateIsbtnShow(true)\r\n                clearInterval(this.setInter)\r\n            }\r\n        },\r\n        addDuration() {\r\n            //向vuex传入这个歌曲的完整时间\r\n            this.updateDuration(this.$refs.audio.duration)\r\n        },\r\n        showPopups() {\r\n            this.updatesonglistmore()\r\n        },\r\n        updateTime() {\r\n            this.setInter = setInterval(() => {\r\n                this.updateCurrentTime(this.$refs.audio.currentTime)\r\n            }, 500)\r\n        },\r\n        //将vuex中的mutations函数导入\r\n        ...mapMutations(['updateIsbtnShow', 'updatesonglistmore', 'updateCurrentTime', 'updateDuration'])\r\n\r\n    },\r\n    //监听computed中接收的playListIndex和playList是否变化\r\n    watch: {\r\n        playListIndex() {\r\n            //如果歌曲的index变化了，获取模板里的ref属性的audio，让他自动播放\r\n            this.$refs.audio.autoplay = true;\r\n            //改变按钮的状态，向vuex里的函数传入值\r\n            if (this.$refs.audio.paused) {\r\n                this.updateIsbtnShow(false)\r\n            }\r\n        },\r\n        //如果歌单变化了，就让他自动播放，并且也改变播放状态\r\n        playList() {\r\n            if (this.isbtnShow) {\r\n                this.updateIsbtnShow(false)\r\n                this.$refs.audio.autoplay = true\r\n            }\r\n        }\r\n    },\r\n    components: {\r\n        //注册子组件\r\n        MusicDetail\r\n    }\r\n}\r\n</script>\r\n<style lang=\"less\" scoped>\r\n.FooterMusic {\r\n    width: 100%;\r\n    height: 1.4rem;\r\n    background-color: white;\r\n    position: fixed;\r\n    bottom: 0;\r\n    border-top: 1px solid #999;\r\n    display: flex;\r\n    padding: 0.2rem;\r\n    justify-content: space-between;\r\n\r\n    .footerLeft {\r\n        width: 79%;\r\n        height: 100%;\r\n        display: flex;\r\n        align-items: center;\r\n\r\n        img {\r\n            width: 1rem;\r\n            height: 1rem;\r\n            border-radius: 50%;\r\n            margin-right: 11px;\r\n        }\r\n\r\n        span {\r\n            font-size: 13px;\r\n            color: #999;\r\n        }\r\n    }\r\n\r\n    .footerRight {\r\n        width: 18%;\r\n        height: 100%;\r\n        display: flex;\r\n        justify-content: space-between;\r\n        align-items: center;\r\n\r\n        .icon3 {\r\n            width: 29px;\r\n            height: 29px;\r\n        }\r\n    }\r\n}\r\n</style>"],"mappings":";;;EACSA,KAAK,EAAC;AAAa;;gEAQZC,mBAAA,CAAqB,cAAf,UAAQ;;EAIjBD,KAAK,EAAC;AAAa;gEAGhBC,mBAAA,CAA0C;EAArC,YAAU,EAAC;AAAmB;oBAAnCC,UAA0C,C;gEAG1CD,mBAAA,CAA0C;EAArC,YAAU,EAAC;AAAmB;oBAAnCE,UAA0C,C;gEAE9CF,mBAAA,CAEM;EAFDD,KAAK,EAAC,OAAO;EAAC,aAAW,EAAC;iBAC3BC,mBAAA,CAAiC;EAA5B,YAAU,EAAC;AAAU,G;;;;;uBArBtCG,mBAAA,CAgCM,OAhCNC,UAgCM,GA/BFC,mBAAA,iDAAoD,EACpDL,mBAAA,CAQM;IARDD,KAAK,EAAC,YAAY;IAAEO,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,IAAA,CAAAC,kBAAA,IAAAD,IAAA,CAAAC,kBAAA,IAAAF,IAAA,CAAkB;MAC9CH,mBAAA,UAAa,EACbL,mBAAA,CAAqD;IAA/CW,GAAG,EAAEF,IAAA,CAAAG,QAAQ,CAACH,IAAA,CAAAI,aAAa,EAAEC,EAAE,CAACC,MAAM;IAAEC,GAAG,EAAC;uCAClDX,mBAAA,UAAa,EACbL,mBAAA,CAGM,cAFFA,mBAAA,CAAyC,WAAAiB,gBAAA,CAAnCR,IAAA,CAAAG,QAAQ,CAACH,IAAA,CAAAI,aAAa,EAAEK,IAAI,kBAClCC,UAAqB,C,KAG7Bd,mBAAA,cAAiB,EACjBL,mBAAA,CAWM,OAXNoB,UAWM,GAVFf,mBAAA,0DAA6D,EACHI,IAAA,CAAAY,SAAS,I,cAAnElB,mBAAA,CAEM;;IAFDJ,KAAK,EAAC,OAAO;IAAC,aAAW,EAAC,MAAM;IAAEO,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEc,QAAA,CAAAC,IAAA,IAAAD,QAAA,CAAAC,IAAA,IAAAf,IAAA,CAAI;mCAGlDL,mBAAA,CAEM;;IAFDJ,KAAK,EAAC,OAAO;IAAC,aAAW,EAAC,MAAM;IAAEO,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEc,QAAA,CAAAC,IAAA,IAAAD,QAAA,CAAAC,IAAA,IAAAf,IAAA,CAAI;mBAGlDgB,UAEM,C,GAEVnB,mBAAA,0BAA6B,EAC7BL,mBAAA,CAAoH;IAA7GyB,GAAG,EAAC,OAAO;IAAEd,GAAG,mDAAmDF,IAAA,CAAAG,QAAQ,CAACH,IAAA,CAAAI,aAAa,EAAEa,EAAE;wCACpGrB,mBAAA,oBAAuB,EACvBsB,YAAA,CAIYC,oBAAA;IAJOC,IAAI,EAAEpB,IAAA,CAAAqB,YAAY;yDAAZrB,IAAA,CAAAqB,YAAY,GAAAC,MAAA;IAAEC,QAAQ,EAAC,OAAO;IAAEC,KAAK,EAAE;MAAAC,KAAA;MAAAC,MAAA;IAAA;;sBAC5D,MAAwE,CAAxE9B,mBAAA,qEAAwE,EACxEsB,YAAA,CACiCS,sBAAA;MADnBC,SAAS,EAAE5B,IAAA,CAAAG,QAAQ,CAACH,IAAA,CAAAI,aAAa;MAAIQ,SAAS,EAAEZ,IAAA,CAAAY,SAAS;MAAGE,IAAI,EAAED,QAAA,CAAAC,IAAI;MAC/Ee,WAAW,EAAEhB,QAAA,CAAAgB"},"metadata":{},"sourceType":"module","externalDependencies":[]}