{"ast":null,"code":"import { getSearchBanner } from '@/requests/api/home';\nexport default {\n  data() {\n    return {\n      //搜索记录\n      keyWordList: [],\n      //当前搜索的内容\n      searchKey: '',\n      //搜索结果\n      searchList: []\n    };\n  },\n  mounted() {\n    //从locakStorage中调用存放的keyWord的内容，防止页面关闭后历史记录销售\n    this.keyWordList = JSON.parse(localStorage.getItem('keyWordList')) || [];\n  },\n  methods: {\n    //async获取搜索信息\n    async enterKey() {\n      //如果搜索栏不为空\n      if (this.searchKey !== '') {\n        //为搜索历史记录的头添加当前搜索的内容\n        this.keyWordList.unshift(this.searchKey);\n        //使用new Set创建一个对象，达到去重复的效果\n        this.keyWordList = [...new Set(this.keyWordList)];\n        if (this.keyWordList.length > 6) {\n          //大于六就删除末尾\n          this.keyWordList.pop();\n        }\n        //存放数据到localStorage\n        localStorage.setItem('keyWordList', JSON.stringify(this.keyWordList));\n        //导入当前搜索的内容到axios中的函数，然后获取相应的数据\n        let res = await getSearchBanner(this.searchKey);\n        // 将获取的的数据存入到searchList中\n        this.searchList = res.data.result.songs;\n        // 完成上面的操作后清空\n        this.searchKey = '';\n      } else {\n        alert('請輸入要搜索的內容');\n      }\n    },\n    deleteHistory() {\n      //删除本地存储的数据\n      localStorage.removeItem('keyWordList');\n      //重新赋值为空\n      this.keyWordList = [];\n    },\n    async searchHistory(item) {\n      //点击历史记录，也会获取相应的歌单数据\n      let res = await getSearchBanner(item);\n      this.searchList = res.data.result.songs;\n    },\n    updateIndex(item) {\n      // 点击搜索结果的歌曲，就会更新vuex中的数据，从而更新底部组件，达到自动播放的效果\n      this.$store.commit('pushPlayList', item);\n      this.$store.commit('updatePlayListIndex', this.$store.state.playList.length - 1);\n    }\n  }\n};","map":{"version":3,"names":["getSearchBanner","data","keyWordList","searchKey","searchList","mounted","JSON","parse","localStorage","getItem","methods","enterKey","unshift","Set","length","pop","setItem","stringify","res","result","songs","alert","deleteHistory","removeItem","searchHistory","item","updateIndex","$store","commit","state","playList"],"sources":["D:\\桌面\\vue项目\\wangyiyunapp\\src\\views\\SearCh.vue"],"sourcesContent":["<template>\r\n    <div>\r\n        <!-- 搜索栏 -->\r\n        <div class=\"searchTop\">\r\n            <!-- 点击该按钮返回上一级路由 -->\r\n            <svg class=\"icon\" aria-hidden=\"true\" @click=\"$router.go(-1)\">\r\n                <use xlink:href=\"#icon-zuojiantou\"></use>\r\n            </svg>\r\n            <!-- 调用enterKey函数，获取搜索的结果 -->\r\n            <input type=\"text\" placeholder=\"結束バンド\" v-model=\"searchKey\" @keydown.enter=\"enterKey\">\r\n        </div>\r\n            <!-- 搜索历史 -->\r\n        <div class=\"searchHistory\">\r\n            <span class=\"searchSpan\">历史</span>\r\n            <!-- v-for获取存放在keyWord的搜索历史，点击调用searchHistory函数，获取相应的搜索记录 -->\r\n            <span v-for=\"item in keyWordList\" :key='item' class=\"spanKey\" @click=\"searchHistory(item)\">\r\n                {{ item }}\r\n            </span>\r\n            <!-- 点击调用删除历史记录的函数，删除本地存储的历史纪录 -->\r\n            <svg class=\"icon\" aria-hidden=\"true\" @click=\"deleteHistory\">\r\n                <use xlink:href=\"#icon-shanchu\"></use>\r\n            </svg>\r\n        </div>\r\n        <div class=\"itemList\">\r\n            <div class=\"item\" v-for=\"(item, i) in searchList\" :key=\"item\">\r\n                <div class=\"itemLeft\" @click=\"updateIndex(item)\">\r\n                    <span class=\"leftSpan\">{{ i + 1 }}</span>\r\n                    <div>\r\n                        <p>{{ item.name }}</p>\r\n                        <span v-for=\"(item1, idx) in item.ar\" :key=\"item1\" class=\"singer\">\r\n                            {{ item1.name }}&nbsp;\r\n                            {{ idx === item.ar.length - 1 ? \"\" : '/' }}&nbsp;\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</template>\r\n<script>\r\nimport { getSearchBanner } from '@/requests/api/home'\r\nexport default {\r\n    data() {\r\n        return {\r\n            //搜索记录\r\n            keyWordList: [],\r\n            //当前搜索的内容\r\n            searchKey: '',\r\n            //搜索结果\r\n            searchList: []\r\n        }\r\n    },\r\n    mounted() {\r\n        //从locakStorage中调用存放的keyWord的内容，防止页面关闭后历史记录销售\r\n        this.keyWordList = JSON.parse(localStorage.getItem('keyWordList')) || []\r\n    },\r\n    methods: {\r\n        //async获取搜索信息\r\n        async enterKey() {\r\n            //如果搜索栏不为空\r\n            if (this.searchKey !== '') {\r\n                //为搜索历史记录的头添加当前搜索的内容\r\n                this.keyWordList.unshift(this.searchKey);\r\n                //使用new Set创建一个对象，达到去重复的效果\r\n                this.keyWordList = [...new Set(this.keyWordList)];\r\n                if (this.keyWordList.length > 6) {\r\n                    //大于六就删除末尾\r\n                    this.keyWordList.pop()\r\n                }\r\n                //存放数据到localStorage\r\n                localStorage.setItem('keyWordList', JSON.stringify(this.keyWordList))\r\n                //导入当前搜索的内容到axios中的函数，然后获取相应的数据\r\n                let res = await getSearchBanner(this.searchKey)\r\n                // 将获取的的数据存入到searchList中\r\n                this.searchList = res.data.result.songs\r\n                // 完成上面的操作后清空\r\n                this.searchKey = '';\r\n            } else {\r\n                alert('請輸入要搜索的內容')\r\n            }\r\n        },\r\n        deleteHistory() {\r\n            //删除本地存储的数据\r\n            localStorage.removeItem('keyWordList');\r\n            //重新赋值为空\r\n            this.keyWordList = [];\r\n        },\r\n        async searchHistory(item) {\r\n            //点击历史记录，也会获取相应的歌单数据\r\n            let res = await getSearchBanner(item)\r\n            this.searchList = res.data.result.songs\r\n        },\r\n        updateIndex(item) {\r\n            // 点击搜索结果的歌曲，就会更新vuex中的数据，从而更新底部组件，达到自动播放的效果\r\n            this.$store.commit('pushPlayList', item)\r\n            this.$store.commit('updatePlayListIndex', this.$store.state.playList.length - 1)\r\n        }\r\n    }\r\n}\r\n</script>\r\n\r\n\r\n\r\n<style lang=\"less\" scoped>\r\n.searchTop {\r\n    width: 100%;\r\n    height: 1rem;\r\n    display: flex;\r\n    align-items: center;\r\n\r\n    input {\r\n        margin-left: .2rem;\r\n        border: none;\r\n        border-bottom: 1px solid #999;\r\n        width: 90%;\r\n        padding: .1rem;\r\n    }\r\n}\r\n\r\n\r\n.searchHistory {\r\n    width: 100%;\r\n    padding: .2rem;\r\n    position: relative;\r\n\r\n    .searchSpan {\r\n        font-weight: 700;\r\n    }\r\n\r\n\r\n    .spanKey {\r\n        padding: .1rem .2rem;\r\n        background-color: rgb(185, 169, 169);\r\n        border-radius: .4rem;\r\n        margin: .1rem .2rem;\r\n        display: inline-block;\r\n    }\r\n\r\n\r\n    .icon {\r\n        width: .45rem;\r\n        height: .45rem;\r\n        position: absolute;\r\n        right: .2rem;\r\n    }\r\n\r\n}\r\n\r\n.itemList {\r\n\r\n    padding: .24rem;\r\n    margin-top: 12px;\r\n    height: 30rem;\r\n\r\n    .item {\r\n        display: flex;\r\n        justify-content: space-between;\r\n        margin-top: .16rem;\r\n        margin-bottom: 30px;\r\n\r\n        .itemLeft {\r\n            display: flex;\r\n            align-items: center;\r\n\r\n            .leftSpan {\r\n                margin-right: .3rem;\r\n            }\r\n\r\n            p {\r\n                margin-bottom: 3px;\r\n            }\r\n\r\n\r\n            .singer {\r\n                font-size: 13px;\r\n                color: gray\r\n            }\r\n\r\n        }\r\n\r\n\r\n        .itemRight {\r\n            svg {\r\n                width: 25px;\r\n                height: 25px;\r\n                fill: gray;\r\n\r\n            }\r\n\r\n            .iconbofang {\r\n                margin-right: 20px;\r\n            }\r\n        }\r\n    }\r\n}\r\n</style>"],"mappings":"AAwCA,SAASA,eAAc,QAAS,qBAAoB;AACpD,eAAe;EACXC,IAAIA,CAAA,EAAG;IACH,OAAO;MACH;MACAC,WAAW,EAAE,EAAE;MACf;MACAC,SAAS,EAAE,EAAE;MACb;MACAC,UAAU,EAAE;IAChB;EACJ,CAAC;EACDC,OAAOA,CAAA,EAAG;IACN;IACA,IAAI,CAACH,WAAU,GAAII,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC,KAAK,EAAC;EAC3E,CAAC;EACDC,OAAO,EAAE;IACL;IACA,MAAMC,QAAQA,CAAA,EAAG;MACb;MACA,IAAI,IAAI,CAACR,SAAQ,KAAM,EAAE,EAAE;QACvB;QACA,IAAI,CAACD,WAAW,CAACU,OAAO,CAAC,IAAI,CAACT,SAAS,CAAC;QACxC;QACA,IAAI,CAACD,WAAU,GAAI,CAAC,GAAG,IAAIW,GAAG,CAAC,IAAI,CAACX,WAAW,CAAC,CAAC;QACjD,IAAI,IAAI,CAACA,WAAW,CAACY,MAAK,GAAI,CAAC,EAAE;UAC7B;UACA,IAAI,CAACZ,WAAW,CAACa,GAAG,EAAC;QACzB;QACA;QACAP,YAAY,CAACQ,OAAO,CAAC,aAAa,EAAEV,IAAI,CAACW,SAAS,CAAC,IAAI,CAACf,WAAW,CAAC;QACpE;QACA,IAAIgB,GAAE,GAAI,MAAMlB,eAAe,CAAC,IAAI,CAACG,SAAS;QAC9C;QACA,IAAI,CAACC,UAAS,GAAIc,GAAG,CAACjB,IAAI,CAACkB,MAAM,CAACC,KAAI;QACtC;QACA,IAAI,CAACjB,SAAQ,GAAI,EAAE;MACvB,OAAO;QACHkB,KAAK,CAAC,WAAW;MACrB;IACJ,CAAC;IACDC,aAAaA,CAAA,EAAG;MACZ;MACAd,YAAY,CAACe,UAAU,CAAC,aAAa,CAAC;MACtC;MACA,IAAI,CAACrB,WAAU,GAAI,EAAE;IACzB,CAAC;IACD,MAAMsB,aAAaA,CAACC,IAAI,EAAE;MACtB;MACA,IAAIP,GAAE,GAAI,MAAMlB,eAAe,CAACyB,IAAI;MACpC,IAAI,CAACrB,UAAS,GAAIc,GAAG,CAACjB,IAAI,CAACkB,MAAM,CAACC,KAAI;IAC1C,CAAC;IACDM,WAAWA,CAACD,IAAI,EAAE;MACd;MACA,IAAI,CAACE,MAAM,CAACC,MAAM,CAAC,cAAc,EAAEH,IAAI;MACvC,IAAI,CAACE,MAAM,CAACC,MAAM,CAAC,qBAAqB,EAAE,IAAI,CAACD,MAAM,CAACE,KAAK,CAACC,QAAQ,CAAChB,MAAK,GAAI,CAAC;IACnF;EACJ;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}